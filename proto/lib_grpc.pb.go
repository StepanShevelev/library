// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: lib.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibInfoClient is the client API for LibInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibInfoClient interface {
	Info(ctx context.Context, in *LibRequest, opts ...grpc.CallOption) (*LibResponse, error)
}

type libInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewLibInfoClient(cc grpc.ClientConnInterface) LibInfoClient {
	return &libInfoClient{cc}
}

func (c *libInfoClient) Info(ctx context.Context, in *LibRequest, opts ...grpc.CallOption) (*LibResponse, error) {
	out := new(LibResponse)
	err := c.cc.Invoke(ctx, "/api.LibInfo/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibInfoServer is the server API for LibInfo service.
// All implementations must embed UnimplementedLibInfoServer
// for forward compatibility
type LibInfoServer interface {
	Info(context.Context, *LibRequest) (*LibResponse, error)
	mustEmbedUnimplementedLibInfoServer()
}

// UnimplementedLibInfoServer must be embedded to have forward compatible implementations.
type UnimplementedLibInfoServer struct {
}

func (UnimplementedLibInfoServer) Info(context.Context, *LibRequest) (*LibResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedLibInfoServer) mustEmbedUnimplementedLibInfoServer() {}

// UnsafeLibInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibInfoServer will
// result in compilation errors.
type UnsafeLibInfoServer interface {
	mustEmbedUnimplementedLibInfoServer()
}

func RegisterLibInfoServer(s grpc.ServiceRegistrar, srv LibInfoServer) {
	s.RegisterService(&LibInfo_ServiceDesc, srv)
}

func _LibInfo_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LibRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibInfoServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.LibInfo/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibInfoServer).Info(ctx, req.(*LibRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibInfo_ServiceDesc is the grpc.ServiceDesc for LibInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.LibInfo",
	HandlerType: (*LibInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _LibInfo_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lib.proto",
}
